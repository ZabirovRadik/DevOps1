#!/usr/bin/env python3
"""
Webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è GitHub
–†–µ–∞–ª–∏–∑—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –¥–µ–ø–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import tempfile
import subprocess
import os
import json
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler

# –ö–æ–Ω—Ñ–∏–≥
PORT = 8080
DEPLOY_DIR = "/opt/CattyForDevOps/"   # –∫—É–¥–∞ –∫–ª–æ–Ω–∏—Ä—É–µ–º / –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç
REPO_URL = "https://github.com/ZabirovRadik/CattyForDevOps.git"  # —Ç–≤–æ–π —Ä–µ–ø–æ
MAIN_DIR = "/home/ubuntu/DevOps1/devops-demo-website"
BRANCH = "develop"          # –≤–µ—Ç–∫–∞ –¥–ª—è –¥–µ–ø–ª–æ—è

class WebhookHandler(BaseHTTPRequestHandler):

    def do_POST(self):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ /webhook
        if self.path != "/webhook":
            self.send_response(404)
            self.end_headers()
            return

        content_length = int(self.headers.get('Content-Length', 0))
        body = self.rfile.read(content_length)

        try:
            payload = json.loads(body.decode("utf-8"))
            event_type = self.headers.get("X-GitHub-Event", "unknown")

            print(f"\nüîî Webhook —Å–æ–±—ã—Ç–∏–µ: {event_type} –≤ {datetime.now()}")

            if event_type == "push":
                self._handle_push_event(payload)

            self.send_response(200)
            self.send_header("Content-type", "application/json")
            self.end_headers()
            self.wfile.write(b'{"status": "ok"}')
        except BrokenPipeError:
            print("‚ÑπÔ∏è –ö–ª–∏–µ–Ω—Ç —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (Broken pipe)")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            self.send_response(500)
            self.end_headers()

    def _handle_push_event(self, payload):
        subprocess.run(["git", "config", "--global", "--add", "safe.directory", DEPLOY_DIR], check=False) 
        branch_ref = payload.get("ref", "")
        branch = branch_ref.replace("refs/heads/", "")
        print(f"‚û°Ô∏è Push –≤ –≤–µ—Ç–∫—É: {branch}")

        if branch != BRANCH:
            print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (–≤–µ—Ç–∫–∞ {branch} –Ω–µ —Ä–∞–≤–Ω–∞ {BRANCH})")
            return

        if not os.path.exists(DEPLOY_DIR):
            print("üì• –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...")
            subprocess.run(["git", "clone", "-b", BRANCH, REPO_URL, DEPLOY_DIR], check=True)
        else:
            print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...")
            subprocess.run(["git", "fetch"], cwd=DEPLOY_DIR, check=True)
            subprocess.run(["git", "checkout", BRANCH], cwd=DEPLOY_DIR, check=True)
            subprocess.run(["git", "pull", "origin", BRANCH], cwd=DEPLOY_DIR, check=True)

        # build.sh (–µ—Å–ª–∏ –µ—Å—Ç—å)
        build_script = os.path.join(MAIN_DIR, "build.sh")
        if os.path.exists(build_script):
            print("üîß –ó–∞–ø—É—Å–∫–∞–µ–º build.sh...")
            subprocess.run(["bash", build_script], cwd=DEPLOY_DIR, check=True)

        # test.sh (–µ—Å–ª–∏ –µ—Å—Ç—å)
        test_script = os.path.join(MAIN_DIR, "test.sh")
        if os.path.exists(test_script):
            print("üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã...")
            try:
                subprocess.run(["bash", test_script], cwd=DEPLOY_DIR, check=True)
                print("‚úÖ –¢–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω—ã")
            except subprocess.CalledProcessError:
                print("‚ùå –¢–µ—Å—Ç—ã —É–ø–∞–ª–∏ ‚Äî –¥–µ–ø–ª–æ–π –æ—Ç–º–µ–Ω—ë–Ω")
                return

        # deploy.sh (–µ—Å–ª–∏ –µ—Å—Ç—å)
        deploy_script = os.path.join(MAIN_DIR, "deploy.sh")
        if os.path.exists(deploy_script):
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π...")
            subprocess.run(["bash", deploy_script], cwd=DEPLOY_DIR, check=True)
            print("‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω")
        else:
            print("‚ö†Ô∏è –ù–µ—Ç deploy.sh, —Ç–æ–ª—å–∫–æ –∫–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω")

def main():
    print(f"üöÄ –ó–∞–ø—É—Å–∫ Webhook —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {PORT}")
    server = HTTPServer(("0.0.0.0", PORT), WebhookHandler)
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()
